// AUTOGENERATED COPYRIGHT HEADER START
// Copyright (C) 2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>
// AUTOGENERATED COPYRIGHT HEADER END
// Copyright (C) 2020-2023 Michael Fabian 'Xaymar' Dirks <info@xaymar.com>

#pragma once
#include "encoders/encoder-ffmpeg.hpp"
#include "encoders/ffmpeg/handler.hpp"

#include "warning-disable.hpp"
#include <cinttypes>
extern "C" {
#include <libavcodec/avcodec.h>
}
#include "warning-enable.hpp"

/* Parameters by their codec specific name.
 * '#' denotes a parameter specified via the context itself.

H.264			H.265				Options							Done?
usage			usage				transcoding						--
preset			preset				speed,balanced,quality			Defines
profile			profile				<different>						Defines
level			level				<different>						Defines
				tier				main,high
rc				rc					cqp,cbr,vbr_peak,vbr_latency	Defines
preanalysis		preanalysis			false,true						Defines
vbaq			vbaq				false,true						Defines
enforce_hrd		enforce_hrd			false,true						Defines
filler_data		filler_data			false,true						--
frame_skipping	skip_frame			false,true						Defines
qp_i			qp_i				range(-1 - 51)					Defines
qp_p			qp_p				range(-1 - 51)					Defines
qp_b								range(-1 - 51)					Defines
#max_b_frames														Defines
bf_delta_qp							range(-10 - 10)					--
bf_ref								false,true						Defines
bf_ref_delta_qp						range(-10 - 10)					--
me_half_pel		me_half_pel			false,true						--
me_quarter_pel	me_quarter_pel		false,true						--
aud				aud					false,true						Defines
max_au_size		max_au_size			range(0 - Inf)					--
#refs								range(0 - 16?)					Defines
#color_range						AVCOL_RANGE_JPEG				FFmpeg
#bit_rate															Defines
#rc_max_rate														Defines
#rc_buffer_size														Defines
#rc_initial_buffer_occupancy										--
#flags								AV_CODEC_FLAG_LOOP_FILTER		--
#gop_size															FFmpeg
*/

// AMF H.264
// intra_refresh_mb: 0 - Inf
// header_spacing: -1 - 1000
// coder: auto, cavlc, cabac
// qmin, qmax (HEVC uses its own settings)

// AMF H.265
// header_insertion_mode: none, gop, idr
// gops_per_idr: 0 - Inf
// min_qp_i: -1 - 51
// max_qp_i: -1 - 51
// min_qp_p: -1 - 51
// max_qp_p: -1 - 51

namespace streamfx::encoder::ffmpeg {
	namespace amf {
		bool is_available();

		void defaults(ffmpeg_factory* factory, obs_data_t* settings);
		void properties_before(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_properties_t* props, AVCodecContext* context);
		void properties_after(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_properties_t* props, AVCodecContext* context);
		void migrate(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, uint64_t version);
		void update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings);
		void override_update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings);

		class avc : public handler {
			public:
			avc();

			public:
			virtual ~avc();

			public:
			virtual std::string help(ffmpeg_factory* factory) override
			{
				return "https://github.com/Xaymar/obs-StreamFX/wiki/Encoder-FFmpeg-AMF";
			};

			public:
			bool has_keyframes(ffmpeg_factory* factory) override;

			public:
			bool has_threading(ffmpeg_factory* factory) override;

			public:
			bool is_hardware(ffmpeg_factory* factory) override;

			public:
			bool is_reconfigurable(ffmpeg_factory* factory, bool& threads, bool& gpu, bool& keyframes) override;

			public:
			void adjust_info(ffmpeg_factory* factory, std::string& id, std::string& name, std::string& codec) override;

			public:
			void defaults(ffmpeg_factory* factory, obs_data_t* settings) override;

			public:
			void properties(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_properties_t* props) override;

			public:
			void migrate(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, uint64_t version) override;

			public:
			void update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_colorformat(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, AVPixelFormat& target_format) override;
		};

		class hevc : public handler {
			public:
			hevc();

			public:
			virtual ~hevc();

			public:
			virtual std::string help(ffmpeg_factory* factory) override
			{
				return "https://github.com/Xaymar/obs-StreamFX/wiki/Encoder-FFmpeg-AMF";
			};

			public:
			bool has_keyframes(ffmpeg_factory* factory) override;

			public:
			bool has_threading(ffmpeg_factory* factory) override;

			public:
			bool is_hardware(ffmpeg_factory* factory) override;

			public:
			bool is_reconfigurable(ffmpeg_factory* factory, bool& threads, bool& gpu, bool& keyframes) override;

			public:
			void adjust_info(ffmpeg_factory* factory, std::string& id, std::string& name, std::string& codec) override;

			public:
			void defaults(ffmpeg_factory* factory, obs_data_t* settings) override;

			public:
			void properties(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_properties_t* props) override;

			public:
			void migrate(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, uint64_t version) override;

			public:
			void update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_colorformat(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, AVPixelFormat& target_format) override;
		};

		class av1 : public handler {
			public:
			av1();

			public:
			virtual ~av1();

			public:
			virtual std::string help(ffmpeg_factory* factory) override
			{
				return "https://github.com/Xaymar/obs-StreamFX/wiki/Encoder-FFmpeg-AMF";
			};

			public:
			bool has_keyframes(ffmpeg_factory* factory) override;

			public:
			bool has_threading(ffmpeg_factory* factory) override;

			public:
			bool is_hardware(ffmpeg_factory* factory) override;

			public:
			bool is_reconfigurable(ffmpeg_factory* factory, bool& threads, bool& gpu, bool& keyframes) override;

			public:
			void adjust_info(ffmpeg_factory* factory, std::string& id, std::string& name, std::string& codec) override;

			public:
			void defaults(ffmpeg_factory* factory, obs_data_t* settings) override;

			public:
			void properties(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_properties_t* props) override;

			public:
			void migrate(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, uint64_t version) override;

			public:
			void update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_update(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings) override;

			public:
			void override_colorformat(ffmpeg_factory* factory, ffmpeg_instance* instance, obs_data_t* settings, AVPixelFormat& target_format) override;
		};

	} // namespace amf

} // namespace streamfx::encoder::ffmpeg
